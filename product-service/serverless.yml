service: product-service
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  environment:
    PGHOST: ${self:custom.dotenvVars.PGHOST, env:PGHOST, ''}
    PGUSER: ${self:custom.dotenvVars.PGUSER, env:PGUSER, ''}
    PGDATABASE: ${self:custom.dotenvVars.PGDATABASE, env:PGDATABASE, ''}
    PGPASSWORD: ${self:custom.dotenvVars.PGPASSWORD, env:PGPASSWORD, ''}
    PGPORT: ${self:custom.dotenvVars.PGPORT, env:PGPORT, ''}
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic

  iamRoleStatements:
    - Effect: 'Allow'
      Action: 'sns:*'
      Resource:
        - Ref: SNSTopic

plugins:
  - serverless-auto-swagger
  - serverless-webpack
  - serverless-offline

custom:
  autoswagger:
    typefiles:
      - ./src/types/products.type.ts
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
    dotenvVars: ${file(configs.js)}
  serverless-offline:
    httpPort: 8000

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: catalogItemsQueue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: createProductTopic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: oddestdan@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic

  Outputs:
    catalogItemsQueueUrl:
      Value: !Ref SQSQueue
      Export:
        Name: !Sub '${AWS::StackName}-catalogItemsQueueUrl'
    catalogItemsQueueArn:
      Value:
        Fn::GetAtt: [SQSQueue, Arn]
      Export:
        Name: !Sub '${AWS::StackName}-catalogItemsQueueArn'

functions:
  getProductById:
    handler: handler.getProductById
    events:
      - http:
          path: products/{productId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                productId: true
  getAllProducts:
    handler: handler.getAllProducts
    events:
      - http:
          path: products
          method: get
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: products
          method: post
          cors: true
          request:
            schema:
              application/json: ${file(src/schemas/createProductSchema.json)}
          bodyType: IProduct
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
